{"cid":"w3zl0pwfe","id":"Vmlldzo0NjA1MTU=","type":"runs","name":"2vt16ql1jey","displayName":"Assignment 2","description":"Learn how to use CNNs: train from scratch, finetune a pretrained model, use a pre-trained model as it is.","updatedAt":"2021-02-13T08:21:37","updatedBy":{"id":"VXNlcjo3NTUzMQ==","username":"miteshk","name":"Mitesh Khapra","admin":false},"createdAt":"2021-02-10T12:31:09","user":{"id":"VXNlcjo3NTUzMQ==","username":"miteshk","name":"Mitesh Khapra","photoUrl":"https://lh3.googleusercontent.com/-_9O3wNux6gQ/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclYFOnEhg4I9pzRY3wrOwPTBbpdtA/s96-c/photo.jpg","admin":false},"entityName":"","project":{"id":"UHJvamVjdDp2MTphc3NpZ25tZW50czptaXRlc2hr","name":"assignments","entityName":"miteshk","readOnly":true},"starCount":3,"starred":false,"locked":false,"viewCount":7626,"accessTokens":[],"spec":{"version":5,"panelSettings":{"smoothingWeight":0,"xAxis":"_step","ignoreOutliers":false,"ref":{"type":"panelSettings","viewID":"elfannxca","id":"2zs48srey"}},"blocks":[{"type":"paragraph","children":[{"text":""}]},{"type":"markdown-block","content":"# Instructions\n- The goal of this assignment is threefold: (i) train a CNN model from scratch and learn how to tune the hyperparameters and visualise filters (ii) finetune a pre-trained model just as you would do in many real world applications (iii) use an existing pre-trained model for a cool application.\n- We strongly recommend that you work on this assignment in a team of size 2. Both the members\nof the team are expected to work together (in a subsequent viva both members will be expected to answer questions, explain the code, etc).\n- Collaborations and discussions with other groups are strictly prohibited.\n- You must use Python (numpy and pandas) for your implementation. \n- You can use any and all packages from keras, pytorch, tensorflow\n- You can run the code in a jupyter notebook on colab by enabling GPUs.\n- You have to generate the report in the same format as shown below using wandb.ai. You can start by cloning this report using the clone option above. Most of the plots that we have asked for below can be (automatically) generated using the apis provided by wandb.ai\n- You also need to provide a link to your github code as shown below. Follow good software engineering practices and set up a github repo for the project on Day 1. Please do not write all code on your local machine and push everything to github on the last day. The commits in github should reflect how the code has evolved during the course of the assignment.\n- You have to check moodle regularly for updates regarding the assignment.\n\n# Problem Statement\n\nIn Part A and Part B of this assignment you will build and experiment with CNN based image classifiers using a subset of the [iNaturalist dataset](https://storage.googleapis.com/wandb_datasets/nature_12K.zip). In Part C you will take a pre-trained object detection model and use it for a novel application.\n\n\n# Part A: Training from scratch\n\n## Question 1 (5 Marks)\nBuild a small CNN model consisting of  5 convolution layers. Each convolution layer would be followed by a ReLU activation and a max pooling layer. Here is sample code for building one such conv-relu-maxpool block in keras.\n\n```\nmodel = Sequential()\nmodel.add(Conv2D(16, (3, 3), input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n```\n\nAfter 5 such conv-relu-maxpool blocks of  layers you should have one dense layer followed by the output layer containing 10 neurons (1 for each of the 10 classes). The input layer should be compatible with the images in the iNaturalist dataset.\n\nThe code should be flexible such that the number of filters, size of filters and activation function in each layer can be changed. You should also be able to change the number of neurons in the dense layer.\n\n(a) What is the total number of computations done by your network? (assume $m$ filters in each layer of size $k\\times k$  and $n$ neurons in the dense layer)\n\n(b) What is the total number of parameters in your network? (assume $m$ filters in each layer of size $k\\times k$  and $n$ neurons in the dense layer)\n\n## Question 2 (10 Marks)\n\nYou will now train your model using the [iNaturalist dataset](https://storage.googleapis.com/wandb_datasets/nature_12K.zip). The zip file contains a train and a test folder. Set aside 10% of the training data for hyperparameter tuning. Make sure each class is equally represented in the validation data. Do not use the test data for hyperparameter tuning. \n\nUsing the sweep feature in wandb find the best hyperparameter configuration. Here are some suggestions but you are free to decide which hyperparameters you want to explore\n\n- number of filters in each layer : 32, 64, ...\n- filter organisation: same number of filters in all layer, doubling in each subsequent layer, halving in each subsequent layer, etc\n- data augmentation (easy to do in keras): Yes, No\n- dropout: 20%, 30% (btw, where will you add dropout? you should read up a bit on this)\n- batch normalisation: Yes, No\n\nBased on your sweep please paste the following plots which are automatically generated by wandb:\n- accuracy v/s created plot (I would like to see the number of experiments you ran to get the best configuration). \n- parallel co-ordinates plot\n- correlation summary table (to see the correlation of each hyperparameter with the loss/accuracy)\n\nAlso write down the hyperparameters and their values that you sweeped over. Smart strategies to reduce the number of runs while still achieving a high accuracy would be appreciated. Write down any unique strategy that you tried.\n\n## Question 3 (15 Marks)\nBased on the above plots write down some insightful observations. For example, \n- adding more filters in the initial layers is better \n- Using bigger filters in initial layers and smaller filters in latter layers is better\n- ..\n\n(Note: I don't know if any of the above statements is true. I just wrote some random comments that came to my mind)\n\n\n## Question 4 (5 Marks)\n\nYou will now apply your best model on the test data (You shouldn't have used test data so far. All the above experiments should have been done using train and val data only). \n\n(a) Use the best model from your sweep and report the accuracy on the test set. \n\n(b) Provide a 10 x 3 grid containing sample images from the test data and predictions made by your best model (more marks for presenting this grid creatively).\n\n(c) Visualise all the filters in the first layer of your best model for a random image from the test set. If there are 64 filters in the first layer plot them in an 8 x 8 grid. \n\n## Question 5 (10 Marks)\n\nApply guided back propagation on any 10 neurons in the CONV5 layer and plot the images which excite this neuron. The idea again is to discover interesting patterns which excite some neurons. You will draw a 10 x 1 grid below with one image for each of the 10 neurons.\n\n\n## Question 6 (10 Marks)\nPaste a link to your github code for Part A\n\nExample: https://github.com/&lt;user-id&gt;/cs6910_assignment2/partA;\n\n- We will check for coding style, clarity in using functions and a README file with clear instructions on training and evaluating the model (the 10 marks will be based on this).\n\n- We will also run a plagiarism check to ensure that the code is not copied (0 marks in the assignment if we find that the code is plagiarised).\n\n- We will check the number of commits made by the two team members and then give marks accordingly. For example, if we see 70% of the commits were made by one team member then that member will get more marks in the assignment (**note that this contribution will decide the marks split for the entire assignment and not just this question**).\n\n- We will also check if the training and test data has been split properly and randomly. You will get 0 marks on the assignment if we find any cheating (e.g., adding test data to training data) to get higher accuracy.\n\n# Part B : Fine-tuning a pre-trained model\n\n## Question 1 (5 Marks)\nIn most DL applications, instead of training a model from scratch, you would use a model pre-trained on a similar/related task/dataset. From keras, you can load any model (InceptionV3, InceptionResNetV2, ResNet50, Xception, etc) pre-trained  on the ImageNet dataset. Given that ImageNet also contains many animal images, it stands to reason that using a model pre-trained on ImageNet maybe helpful for this task. \n\nYou will load a pre-trained model and then fine-tune it using the naturalist data that you used in the previous question. Simply put, instead of randomly initialising the weigths of a network you will use the weights resulting from training the model on the ImageNet data (keras directly provides these weights). Please answer the following questions:\n\n(a) The dimensions of the images in your data may not be the same as that in the ImageNet data. How will you address this?\n\n(b) ImageNet has 1000 classes and hence the last layer of the pre-trained model would have 1000 nodes. However, the naturalist dataset has only 10 classes. How will you address this?\n\nYour implementation should be modular so that it allows to swap in any model (InceptionV3, InceptionResNetV2, ResNet50, Xception).\n\n(Note: This question is only to check the implementation. The subsequent questions will talk about how exactly you will do the fine-tuning)\n\n## Question 2 (5 Marks)\nYou will notice that InceptionV3, InceptionResNetV2, ResNet50, Xception are very huge models as compared to the simple model that you implemented in Part A. Even fine-tuning on a small training data may be very expensive. What is a common trick used to keep the training tractable (you will have to read up a bit on this)? Try different variants of this trick and fine-tune the model using the iNaturalist dataset. For example, '_______'ing all layers except the last layer, '_______'ing upto k layers and  '_______'ing the rest. Read up on pre-training and fine-tuning to understand what exactly these terms mean.\n\nWrite down the different strategies that you tried (simple bullet points would be fine).\n\n## Question 3 (15 Marks)\nNow finetune the model using different strategies that you discussed above and different hyperparameter choices. Based on these experiments write down some insightful inferences (once again you will find the sweep function to be useful to plot and compare different choices). \n\nHere are some examples of inferences that you can draw:\n\n- Using a huge pre-trained network works better than training a smaller network from scratch (as you did in Part A)\n- InceptionV3 works better for this task than ResNet50\n- Using a pre-trained model, leads to faster convergence as opposed to training a model from scratch\n- ... ....\n\n(Note: I don't know if any of the above statements is true. I just wrote some random comments that came to my mind)\nOf course, provide evidence (in the form of plots) for each inference.\n\nOf course, provide appropriate plots for the above inferences (mostly automatically generated by wandb). The more insightful and thorough your inferences and the better the supporting evidence (in terms of plots), the more you will score in this question.\n\n\n## Question 4 (10 Marks)\nPaste a link to your github code for Part A\n\nExample: https://github.com/&lt;user-id&gt;/cs6910_assignment2/partB\n\nFollow the same instructions as in Question 6 of Part A. \n\n# Part C : Using a pre-trained model as it is\n\n## Question 1 (15 Marks)\nObject detection is the task of identifying objects (such as cars, trees, people, animals) in images. Over the past 6 years, there has been tremendous progress in object detection with very fast and accurate models available today. In this question you will use a pre-trained YoloV3 model and use it in an application of your choice. Here is a cool demo of YoloV2 (click on the image to see the demo on youtube).\n\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/VOC3huqHrss/0.jpg)](https://www.youtube.com/watch?v=VOC3huqHrss)\n\n\nGo crazy and think of a cool application in which you can use object detection (alerting lab mates of monkeys loitering outside the lab, detecting cycles in the CRC corridor, ....). More marks if you come up with an application which has social relevance.\n\nMake a similar demo video of your application, upload it on youtube and paste a link below (similar to the demo I have pasted above). \n\nAlso note that I do not expect you to train any model here but just use an existing model as it is. However, if you want to fine-tune the model on some application-specific data then you are free to do that (it is entirely up to you).\n\nNotice that for this question I am not asking you to provide a github link to your code. I am giving you a free hand to take existing code and tweak it for your application. Feel free to paste the link of your code here nonetheless (if you want).\n\nExample: https://github.com/&lt;user-id&gt;/cs6910_assignment2/partC\n\n# Self Declaration\n\nList down the contributions of the two team members:\n\nFor example, \n\nCS20Mzzzz: (70% contribution)\n- ...\n- ...\n- ...\n- ...\n- ...\n- ...\n\nCS20Myyyy: (30% contribution)\n- ...\n- ...\n- ...\n- ...\n\nWe, Name_XXX and Name_ZZZ, swear on our honour that the above declaration is correct.\n\n\n**Note:** Your marks in the assignment will be in proportion to the above declaration. Honesty will be rewarded (Help is always given in CS6910 to those who deserve it!). \n\nThis is an opportunity for you to come clean. If one of the team members has not contributed then it should come out clearly from the above declaration. There will be a viva after the submission. If your performance in the viva does not match the declaration above then both the team members will be penalised (50% of the marks earned in the assignment). \n\n\n\n\n","children":[{"text":""}]},{"type":"paragraph","children":[{"text":""}]}],"width":"fixed","authors":[{"username":"miteshk","name":"Mitesh Khapra"}],"discussionThreads":[],"ref":{"type":"runs/draft","viewID":"elfannxca","id":"dfixf2ezd"}}}